{"version":3,"sources":["../../src/addon/messages/pages/settings/settings.module.ts","../../src/addon/messages/pages/settings/settings.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AAAA,sCAAsC;AACtC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;;;;AAEQ;AACO;AACM;AACC;AACc;AACA;AACc;AAcnF;IAAA;IAA8C,CAAC;IAAlC,+BAA+B;QAZ3C,uEAAQ,CAAC;YACN,YAAY,EAAE;gBACV,4EAAyB;aAC5B;YACD,OAAO,EAAE;gBACL,2FAAoB;gBACpB,2FAAoB;gBACpB,oGAA6B;gBAC7B,sEAAe,CAAC,QAAQ,CAAC,4EAAyB,CAAC;gBACnD,4EAAe,CAAC,QAAQ,EAAE;aAC7B;SACJ,CAAC;OACW,+BAA+B,CAAG;IAAD,sCAAC;CAAA;AAAH;;;;;;;;;;;;;AClC5C;AAAA,sCAAsC;AACtC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;;;;;;;AAEoB;AAEY;AACJ;AACD;AAE5D;;GAEG;AAMH;IAOI,mCAAoB,gBAAuC,EAAU,QAA8B,EACnF,YAA8B;QAD1B,qBAAgB,GAAhB,gBAAgB,CAAuB;QAAU,aAAQ,GAAR,QAAQ,CAAsB;QACnF,iBAAY,GAAZ,YAAY,CAAkB;QAH9C,0BAAqB,GAAG,KAAK,CAAC;IAI9B,CAAC;IAED;;;;OAIG;IACH,kDAAc,GAAd;QACI,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACO,oDAAgB,GAA1B;QAAA,iBASC;QARG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAAC,UAAC,WAAW;YAClE,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;YAC/B,KAAI,CAAC,qBAAqB,GAAG,WAAW,CAAC,gBAAgB,CAAC;QAC9D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,OAAO;YACb,KAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,OAAO,CAAC;YACP,KAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAClC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACO,qDAAiB,GAA3B;QAAA,iBAIC;QAHG,IAAI,CAAC,gBAAgB,CAAC,4BAA4B,EAAE,CAAC,OAAO,CAAC;YACzD,KAAI,CAAC,gBAAgB,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACO,+DAA2B,GAArC;QAAA,iBAQC;QAPG,0BAA0B;QAC1B,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEjC,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC;YAC5B,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,KAAI,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,EAAE,IAAI,CAAC,CAAC;IACb,CAAC;IAED;;;;OAIG;IACH,oDAAgB,GAAhB,UAAiB,KAAc;QAA/B,iBAYC;QAXG,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QACnE,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,0BAA0B,EAAE,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;YACnF,mDAAmD;YACnD,KAAI,CAAC,2BAA2B,EAAE,CAAC;QACvC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,OAAO;YACb,gCAAgC;YAChC,KAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACtC,KAAI,CAAC,qBAAqB,GAAG,CAAC,KAAI,CAAC,qBAAqB,CAAC;QAC7D,CAAC,CAAC,CAAC,OAAO,CAAC;YACP,KAAK,CAAC,OAAO,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IACH,oDAAgB,GAAhB,UAAiB,YAAiB,EAAE,KAAa,EAAE,SAAc;QAAjE,iBA+BC;QA9BG,IAAM,cAAc,GAAG,SAAS,CAAC,KAAK,CAAC,EACnC,cAAc,GAAG,YAAY,CAAC,aAAa,GAAG,GAAG,GAAG,cAAc,CAAC,IAAI,EACvE,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,KAAK,GAAG,MAAM,CAAC;QAEnB,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,SAAS;YACtC,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC3B,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACnB,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjC,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;YACzB,YAAY,CAAC,QAAQ,GAAG,EAAE,CAAC;QAC/B,CAAC;QAED,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;QACpC,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC;YAC/D,mDAAmD;YACnD,KAAI,CAAC,2BAA2B,EAAE,CAAC;QACvC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,OAAO;YACb,gCAAgC;YAChC,KAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACtC,cAAc,CAAC,OAAO,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC;QACrD,CAAC,CAAC,CAAC,OAAO,CAAC;YACP,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;QACzC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACH,gDAAY,GAAZ,UAAa,SAAc;QAA3B,iBAMC;QALG,IAAI,CAAC,gBAAgB,CAAC,4BAA4B,EAAE,CAAC,OAAO,CAAC;YACzD,KAAI,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC;gBAC5B,SAAS,CAAC,QAAQ,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,+CAAW,GAAX;QACI,4EAA4E;QAC5E,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACrB,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACjC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC;IACL,CAAC;IA3IQ,yBAAyB;QAJrC,wEAAS,CAAC;YACP,QAAQ,EAAE,8BAA8B;WACZ;SAC/B,CAAC;iGAQqG;YACrE,gBAAgB;OARrC,yBAAyB,CA4IrC;IAAD,CAAC;AAAA;SA5IY,yBAAyB,E","file":"94.js","sourcesContent":["// (C) Copyright 2015 Martin Dougiamas\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AddonMessagesSettingsPage } from './settings';\nimport { CoreComponentsModule } from '@components/components.module';\nimport { CoreDirectivesModule } from '@directives/directives.module';\nimport { AddonMessagesComponentsModule } from '../../components/components.module';\n\n@NgModule({\n    declarations: [\n        AddonMessagesSettingsPage,\n    ],\n    imports: [\n        CoreComponentsModule,\n        CoreDirectivesModule,\n        AddonMessagesComponentsModule,\n        IonicPageModule.forChild(AddonMessagesSettingsPage),\n        TranslateModule.forChild()\n    ],\n})\nexport class AddonMessagesSettingsPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/messages/pages/settings/settings.module.ts","// (C) Copyright 2015 Martin Dougiamas\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy } from '@angular/core';\nimport { IonicPage } from 'ionic-angular';\nimport { AddonMessagesProvider } from '../../providers/messages';\nimport { CoreUserProvider } from '@core/user/providers/user';\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\n\n/**\n * Page that displays the messages settings page.\n */\n@IonicPage({ segment: 'addon-messages-settings' })\n@Component({\n    selector: 'page-addon-messages-settings',\n    templateUrl: 'settings.html',\n})\nexport class AddonMessagesSettingsPage implements OnDestroy {\n    protected updateTimeout: any;\n\n    preferences: any;\n    preferencesLoaded: boolean;\n    blockNonContactsState = false;\n\n    constructor(private messagesProvider: AddonMessagesProvider, private domUtils: CoreDomUtilsProvider,\n            private userProvider: CoreUserProvider) {\n    }\n\n    /**\n     * Runs when the page has loaded. This event only happens once per page being created.\n     * If a page leaves but is cached, then this event will not fire again on a subsequent viewing.\n     * Setup code for the page.\n     */\n    ionViewDidLoad(): void {\n        this.fetchPreferences();\n    }\n\n    /**\n     * Fetches preference data.\n     *\n     * @return {Promise<any>} Resolved when done.\n     */\n    protected fetchPreferences(): Promise<any> {\n        return this.messagesProvider.getMessagePreferences().then((preferences) => {\n            this.preferences = preferences;\n            this.blockNonContactsState = preferences.blocknoncontacts;\n        }).catch((message) => {\n            this.domUtils.showErrorModal(message);\n        }).finally(() => {\n            this.preferencesLoaded = true;\n        });\n    }\n\n    /**\n     * Update preferences. The purpose is to store the updated data, it won't be reflected in the view.\n     */\n    protected updatePreferences(): void {\n        this.messagesProvider.invalidateMessagePreferences().finally(() => {\n            this.fetchPreferences();\n        });\n    }\n\n    /**\n     * Update preferences after a certain time. The purpose is to store the updated data, it won't be reflected in the view.\n     */\n    protected updatePreferencesAfterDelay(): void {\n        // Cancel pending updates.\n        clearTimeout(this.updateTimeout);\n\n        this.updateTimeout = setTimeout(() => {\n            this.updateTimeout = null;\n            this.updatePreferences();\n        }, 5000);\n    }\n\n    /**\n     * Block non contacts.\n     *\n     * @param {boolean} block If it should be blocked or not.\n     */\n    blockNonContacts(block: boolean): void {\n        const modal = this.domUtils.showModalLoading('core.sending', true);\n        this.userProvider.updateUserPreference('message_blocknoncontacts', block ? 1 : 0).then(() => {\n            // Update the preferences since they were modified.\n            this.updatePreferencesAfterDelay();\n        }).catch((message) => {\n            // Show error and revert change.\n            this.domUtils.showErrorModal(message);\n            this.blockNonContactsState = !this.blockNonContactsState;\n        }).finally(() => {\n            modal.dismiss();\n        });\n    }\n\n    /**\n     * Change the value of a certain preference.\n     *\n     * @param {any}    notification Notification object.\n     * @param {string} state        State name, ['loggedin', 'loggedoff'].\n     * @param {any}    processor    Notification processor.\n     */\n    changePreference(notification: any, state: string, processor: any): void {\n        const processorState = processor[state],\n            preferenceName = notification.preferencekey + '_' + processorState.name,\n            valueArray = [];\n        let value = 'none';\n\n        notification.processors.forEach((processor) => {\n            if (processor[state].checked) {\n                valueArray.push(processor.name);\n            }\n        });\n\n        if (value.length > 0) {\n            value = valueArray.join(',');\n        }\n\n        if (!notification.updating) {\n            notification.updating = {};\n        }\n\n        notification.updating[state] = true;\n        this.userProvider.updateUserPreference(preferenceName, value).then(() => {\n            // Update the preferences since they were modified.\n            this.updatePreferencesAfterDelay();\n        }).catch((message) => {\n            // Show error and revert change.\n            this.domUtils.showErrorModal(message);\n            processorState.checked = !processorState.checked;\n        }).finally(() => {\n            notification.updating[state] = false;\n        });\n    }\n\n    /**\n     * Refresh the list of preferences.\n     *\n     * @param {any} refresher Refresher.\n     */\n    refreshEvent(refresher: any): void {\n        this.messagesProvider.invalidateMessagePreferences().finally(() => {\n            this.fetchPreferences().finally(() => {\n                refresher.complete();\n            });\n        });\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        // If there is a pending action to update preferences, execute it right now.\n        if (this.updateTimeout) {\n            clearTimeout(this.updateTimeout);\n            this.updatePreferences();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/messages/pages/settings/settings.ts"],"sourceRoot":""}